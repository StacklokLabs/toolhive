// Code generated by MockGen. DO NOT EDIT.
// Source: 1password.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_onepassword.go -package=mocks -source=1password.go OPSecretsService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOPSecretsService is a mock of OPSecretsService interface.
type MockOPSecretsService struct {
	ctrl     *gomock.Controller
	recorder *MockOPSecretsServiceMockRecorder
	isgomock struct{}
}

// MockOPSecretsServiceMockRecorder is the mock recorder for MockOPSecretsService.
type MockOPSecretsServiceMockRecorder struct {
	mock *MockOPSecretsService
}

// NewMockOPSecretsService creates a new mock instance.
func NewMockOPSecretsService(ctrl *gomock.Controller) *MockOPSecretsService {
	mock := &MockOPSecretsService{ctrl: ctrl}
	mock.recorder = &MockOPSecretsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOPSecretsService) EXPECT() *MockOPSecretsServiceMockRecorder {
	return m.recorder
}

// Resolve mocks base method.
func (m *MockOPSecretsService) Resolve(ctx context.Context, secretReference string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", ctx, secretReference)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve.
func (mr *MockOPSecretsServiceMockRecorder) Resolve(ctx, secretReference any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockOPSecretsService)(nil).Resolve), ctx, secretReference)
}

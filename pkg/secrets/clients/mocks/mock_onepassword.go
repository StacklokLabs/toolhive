// Code generated by MockGen. DO NOT EDIT.
// Source: 1password.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_onepassword.go -package=mocks -source=1password.go OnePasswordClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	onepassword "github.com/1password/onepassword-sdk-go"
	gomock "go.uber.org/mock/gomock"
)

// MockOnePasswordClient is a mock of OnePasswordClient interface.
type MockOnePasswordClient struct {
	ctrl     *gomock.Controller
	recorder *MockOnePasswordClientMockRecorder
	isgomock struct{}
}

// MockOnePasswordClientMockRecorder is the mock recorder for MockOnePasswordClient.
type MockOnePasswordClientMockRecorder struct {
	mock *MockOnePasswordClient
}

// NewMockOnePasswordClient creates a new mock instance.
func NewMockOnePasswordClient(ctrl *gomock.Controller) *MockOnePasswordClient {
	mock := &MockOnePasswordClient{ctrl: ctrl}
	mock.recorder = &MockOnePasswordClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOnePasswordClient) EXPECT() *MockOnePasswordClientMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockOnePasswordClient) List(ctx context.Context, vaultID string, filters ...onepassword.ItemListFilter) ([]onepassword.ItemOverview, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, vaultID}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]onepassword.ItemOverview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockOnePasswordClientMockRecorder) List(ctx, vaultID any, filters ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, vaultID}, filters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOnePasswordClient)(nil).List), varargs...)
}

// Resolve mocks base method.
func (m *MockOnePasswordClient) Resolve(ctx context.Context, secretReference string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", ctx, secretReference)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve.
func (mr *MockOnePasswordClientMockRecorder) Resolve(ctx, secretReference any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockOnePasswordClient)(nil).Resolve), ctx, secretReference)
}

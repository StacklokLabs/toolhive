{
  "version": "1.0.0",
  "last_updated": "2025-03-25 16:58:54",
  "seccomp_defaults": {
    "enabled": false,
    "denied_syscalls": ["ptrace", "reboot", "kexec_load"],
    "allowed_syscalls": ["read", "write", "exit", "open", "close"],
    "default_action": "errno",
    "architectures": ["x86_64", "arm64"]
  },
  "servers": {
    "fetch": {
      "image": "mcp/fetch:latest",
      "description": "A Model Context Protocol server that provides web content fetching capabilities",
      "transport": "stdio",
      "permissions": {
        "read": [],
        "write": [],
        "network": {
          "outbound": {
            "insecure_allow_all": true,
            "allow_transport": [
              "tcp"
            ],
            "allow_host": [
              "github.com"
            ],
            "allow_port": [
              443
            ]
          }
        },
        "seccomp": {
          "enabled": false,
          "denied_syscalls": ["ptrace", "reboot", "kexec_load"],
          "allowed_syscalls": ["read", "write", "exit", "open", "close"]
        }
      },
      "tools": [
        "fetch"
      ],
      "env_vars": [
      ],
      "args": [],
      "metadata": {
        "stars": 1,
        "pulls": 3966,
        "last_updated": "2024-12-20T01:01:51.559934Z"
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "content",
        "html",
        "markdown",
        "fetch",
        "fetching",
        "get",
        "wget",
        "json",
        "curl",
        "modelcontextprotocol"
      ]
    },
    "git": {
      "image": "mcp/git:latest",
      "description": "A Model Context Protocol server for Git repository interaction and automation",
      "transport": "stdio",
      "permissions": {
        "read": [],
        "write": [],
        "network": {
          "outbound": {
            "insecure_allow_all": false,
            "allow_transport": [],
            "allow_host": [],
            "allow_port": []
          }
        }
      },
      "tools": [
        "git_status",
        "git_diff_unstaged",
        "git_diff_staged",
        "git_diff",
        "git_commit",
        "git_add",
        "git_reset",
        "git_log",
        "git_create_branch",
        "git_checkout",
        "git_show",
        "git_init"
      ],
      "env_vars": [],
      "args": [],
      "metadata": {
        "stars": 1,
        "pulls": 1746,
        "last_updated": "2024-12-20T01:00:10.05033Z"
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "adds",
        "automation",
        "git",
        "interaction",
        "records",
        "repository",
        "shows",
        "tools",
        "unstages"
      ]
    },
    "time": {
      "image": "mcp/time:latest",
      "description": "MCP server for time info and IANA timezone conversions with auto system timezone detection.\n\n\n\n\n",
      "transport": "stdio",
      "permissions": {
        "read": [],
        "write": [],
        "network": {
          "outbound": {
            "insecure_allow_all": false,
            "allow_transport": [
              "tcp"
            ],
            "allow_host": [],
            "allow_port": [
              443
            ]
          }
        }
      },
      "tools": [
        "get_current_time",
        "convert_time"
      ],
      "env_vars": [],
      "args": [],
      "metadata": {
        "stars": 1,
        "pulls": 1509,
        "last_updated": "2024-12-20T01:00:35.453956Z"
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "auto",
        "available",
        "configuration",
        "conversions",
        "convert_time",
        "customization",
        "details",
        "detection",
        "example",
        "examples"
      ]
    },
    "sentry": {
      "image": "mcp/sentry:latest",
      "description": "A Model Context Protocol server for retrieving and analyzing issues from Sentry.io",
      "transport": "stdio",
      "permissions": {
        "read": [],
        "write": [],
        "network": {
          "outbound": {
            "insecure_allow_all": false,
            "allow_transport": [
              "tcp"
            ],
            "allow_host": [],
            "allow_port": [
              443
            ]
          }
        }
      },
      "tools": [
        "get_sentry_issue"
      ],
      "env_vars": [
        {
          "name": "SENTRY_TOKEN",
          "description": "Sentry authentication token for API access",
          "required": true
        }
      ],
      "args": [],
      "metadata": {
        "stars": 1,
        "pulls": 255,
        "last_updated": "2024-12-20T01:00:56.261511Z"
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "analyzing",
        "issues",
        "retrieving",
        "sentry",
        "tools"
      ]
    },
    "sqlite": {
      "image": "mcp/sqlite:latest",
      "description": "MCP server with SQLite for SQL queries, data analysis, and auto-generated business insights.\n\n\n\n\n",
      "transport": "stdio",
      "permissions": {
        "read": [
        ],
        "write": [
        ],
        "network": {
          "outbound": {
            "insecure_allow_all": false,
            "allow_transport": [
              "tcp"
            ],
            "allow_host": [],
            "allow_port": [
              443
            ]
          }
        }
      },
      "tools": [
        "read_query",
        "write_query",
        "create_table",
        "list_tables",
        "describe_table",
        "append_insight"
      ],
      "env_vars": [],
      "args": [],
      "metadata": {
        "stars": 2,
        "pulls": 1986,
        "last_updated": "2024-12-20T01:01:15.906956Z"
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "analysis",
        "auto",
        "business",
        "data",
        "generated",
        "insights",
        "queries",
        "sql",
        "sqlite",
        "tools"
      ]
    },
    "aws-kb-retrieval-server": {
      "image": "mcp/aws-kb-retrieval-server:latest",
      "description": "MCP server for retrieving information from the AWS Knowledge Base using the Bedrock Agent Runtime.",
      "transport": "stdio",
      "permissions": {
        "read": [],
        "write": [],
        "network": {
          "outbound": {
            "insecure_allow_all": true,
            "allow_transport": [
              "tcp"
            ],
            "allow_host": [],
            "allow_port": [
              443
            ]
          }
        }
      },
      "tools": [
        "retrieve_from_aws_kb"
      ],
      "env_vars": [
        {
          "name": "AWS_ACCESS_KEY_ID",
          "description": "AWS access key ID for Bedrock Agent Runtime operations",
          "required": true
        },
        {
          "name": "AWS_SECRET_ACCESS_KEY",
          "description": "AWS secret access key for Bedrock Agent Runtime operations",
          "required": true
        },
        {
          "name": "AWS_REGION",
          "description": "AWS region where the Knowledge Base is located",
          "required": true
        }
      ],
      "args": [],
      "metadata": {
        "stars": 4,
        "pulls": 279,
        "last_updated": "2024-12-20T16:14:06.482533Z"
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "agent",
        "aws",
        "aws-kb-retrieval-server",
        "base",
        "bedrock",
        "information",
        "knowledge",
        "retrieval",
        "retrieving",
        "runtime"
      ]
    },
    "brave-search": {
      "image": "mcp/brave-search:latest",
      "description": "MCP server that integrates the Brave Search API, providing both web and local search capabilities.",
      "transport": "stdio",
      "permissions": {
        "read": [],
        "write": [],
        "network": {
          "outbound": {
            "insecure_allow_all": false,
            "allow_transport": [
              "tcp"
            ],
            "allow_host": [
              "brave.com",
              "api.search.brave.com"
            ],
            "allow_port": [
              443
            ]
          }
        }
      },
      "tools": [
        "brave_web_search",
        "brave_local_search"
      ],
      "env_vars": [
        {
          "name": "BRAVE_API_KEY",
          "description": "Brave Search API key for web and local search capabilities",
          "required": true
        }
      ],
      "args": [],
      "metadata": {
        "stars": 1,
        "pulls": 4220,
        "last_updated": "2024-12-20T16:14:13.058756Z"
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "api",
        "both",
        "brave",
        "brave-search",
        "brave_local_search",
        "capabilities",
        "execute",
        "integrates",
        "local",
        "providing"
      ]
    },
    "everart": {
      "image": "mcp/everart:latest",
      "description": "Image generation server for Claude Desktop using EverArt's API.",
      "transport": "stdio",
      "permissions": {
        "read": [],
        "write": [],
        "network": {
          "outbound": {
            "insecure_allow_all": false,
            "allow_transport": [
              "tcp"
            ],
            "allow_host": [],
            "allow_port": [
              443
            ]
          }
        }
      },
      "tools": [
        "generate_image"
      ],
      "env_vars": [
        {
          "name": "EVERART_API_KEY",
          "description": "EverArt API key for image generation",
          "required": true
        }
      ],
      "args": [],
      "metadata": {
        "stars": 0,
        "pulls": 163,
        "last_updated": "2024-12-20T16:14:22.715917Z"
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "api",
        "claude",
        "desktop",
        "everart",
        "generation",
        "image",
        "tools",
        "using"
      ]
    },
    "firecrawl": {
      "image": "mcp/firecrawl:latest",
      "description": "A powerful web scraping and content extraction MCP server that provides advanced crawling, search, and structured data extraction capabilities with LLM integration.",
      "transport": "stdio",
      "permissions": {
        "read": [],
        "write": [],
        "network": {
          "outbound": {
            "insecure_allow_all": true,
            "allow_transport": [
              "tcp"
            ],
            "allow_host": [],
            "allow_port": [
              443
            ]
          }
        }
      },
      "tools": [
        "firecrawl_scrape",
        "firecrawl_batch_scrape",
        "firecrawl_check_batch_status",
        "firecrawl_check_crawl_status",
        "firecrawl_search",
        "firecrawl_crawl",
        "firecrawl_extract",
        "firecrawl_deep_research",
        "firecrawl_generate_llmstxt",
        "firecrawl_map"
      ],
      "env_vars": [
        {
          "name": "FIRECRAWL_API_KEY",
          "description": "API key for FireCrawl service authentication",
          "required": true
        },
        {
          "name": "FIRECRAWL_API_URL",
          "description": "FireCrawl API URL (default: https://api.firecrawl.dev/v1)",
          "required": false
        },
        {
          "name": "FIRECRAWL_RETRY_MAX_ATTEMPTS",
          "description": "Maximum number of retry attempts for API calls",
          "required": false
        },
        {
          "name": "FIRECRAWL_RETRY_INITIAL_DELAY",
          "description": "Initial delay in milliseconds for retry backoff",
          "required": false
        },
        {
          "name": "FIRECRAWL_RETRY_MAX_DELAY",
          "description": "Maximum delay in milliseconds for retry backoff",
          "required": false
        },
        {
          "name": "FIRECRAWL_RETRY_BACKOFF_FACTOR",
          "description": "Backoff factor for retry delay calculation",
          "required": false
        },
        {
          "name": "FIRECRAWL_CREDIT_WARNING_THRESHOLD",
          "description": "Credit threshold for warning notifications",
          "required": false
        },
        {
          "name": "FIRECRAWL_CREDIT_CRITICAL_THRESHOLD",
          "description": "Credit threshold for critical notifications",
          "required": false
        }
      ],
      "args": [],
      "metadata": {
        "stars": 1900,
        "pulls": 0,
        "last_updated": "2025-03-25T16:58:54Z"
      },
      "repository_url": "https://github.com/mendableai/firecrawl-mcp-server",
      "tags": [
        "web-crawler",
        "web-scraping",
        "data-collection",
        "batch-processing",
        "content-extraction",
        "search-api",
        "llm-tools",
        "javascript-rendering",
        "research",
        "automation"
      ]
    },
    "everything": {
      "image": "mcp/everything:latest",
      "description": "This MCP server attempts to exercise all the features of the MCP protocol",
      "transport": "stdio",
      "permissions": {
        "read": [],
        "write": [],
        "network": {
          "outbound": {
            "insecure_allow_all": false,
            "allow_transport": [
              "tcp"
            ],
            "allow_host": [],
            "allow_port": [
              443
            ]
          }
        }
      },
      "tools": [
        "echo",
        "add",
        "longRunningOperation",
        "sampleLLM",
        "getTinyImage",
        "printEnv",
        "annotatedMessage"
      ],
      "env_vars": [],
      "args": [],
      "metadata": {
        "stars": 2,
        "pulls": 288,
        "last_updated": "2024-12-20T16:14:33.343336Z"
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "adds",
        "all",
        "attempts",
        "demonstrates",
        "everything",
        "exercise",
        "features",
        "returns",
        "simple",
        "tools"
      ]
    },
    "filesystem": {
      "image": "mcp/filesystem:latest",
      "description": "Node.js server implementing Model Context Protocol (MCP) for filesystem operations.",
      "transport": "stdio",
      "permissions": {
        "read": [
          "/tmp"
        ],
        "write": [
          "/tmp"
        ],
        "network": {
          "outbound": {
            "insecure_allow_all": false,
            "allow_transport": [
              "tcp"
            ],
            "allow_host": [],
            "allow_port": [
              443
            ]
          }
        }
      },
      "tools": [
        "read_file",
        "read_multiple_files",
        "write_file",
        "edit_file",
        "create_directory",
        "list_directory",
        "move_file",
        "search_files",
        "get_file_info",
        "list_allowed_directories"
      ],
      "env_vars": [],
      "args": [],
      "metadata": {
        "stars": 1,
        "pulls": 4031,
        "last_updated": "2024-12-20T16:14:44.067824Z"
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "create_directory",
        "edit_file",
        "filesystem",
        "get_file_info",
        "implementing",
        "list_allowed_directories",
        "list_directory",
        "move_file",
        "node",
        "operations"
      ]
    },
    "gdrive": {
      "image": "mcp/gdrive:latest",
      "description": "This MCP server integrates with Google Drive to allow listing, reading, and searching over files.",
      "transport": "stdio",
      "permissions": {
        "read": [],
        "write": [],
        "network": {
          "outbound": {
            "insecure_allow_all": false,
            "allow_transport": [
              "tcp"
            ],
            "allow_host": [],
            "allow_port": [
              443
            ]
          }
        }
      },
      "tools": [
        "search"
      ],
      "env_vars": [
        {
          "name": "GDRIVE_OAUTH_PATH",
          "description": "Path to the OAuth keys file for Google Drive API authentication",
          "required": true
        },
        {
          "name": "GDRIVE_CREDENTIALS_PATH",
          "description": "Path to save/load Google Drive API credentials",
          "required": true
        }
      ],
      "args": [],
      "metadata": {
        "stars": 2,
        "pulls": 647,
        "last_updated": "2024-12-20T21:45:48.670733Z"
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "drive",
        "files",
        "gdrive",
        "google",
        "integrates",
        "listing",
        "reading",
        "searching",
        "documents",
        "spreadsheets",
        "presentations"
      ]
    },
    "github": {
      "image": "ghcr.io/github/github-mcp-server:latest",
      "description": "The GitHub MCP Server provides seamless integration with GitHub APIs, enabling advanced automation and interaction capabilities for developers and tools",
      "transport": "stdio",
      "permissions": {
        "read": [],
        "write": [],
        "network": {
          "outbound": {
            "insecure_allow_all": false,
            "allow_transport": [
              "tcp"
            ],
            "allow_host": [
              "docs.github.com",
              "github.com"
            ],
            "allow_port": [
              443
            ]
          }
        }
      },
      "tools": [
        "get_me",
        "get_issue",
        "create_issue",
        "add_issue_comment",
        "list_issues",
        "update_issue",
        "search_issues",
        "get_pull_request",
        "list_pull_requests",
        "merge_pull_request",
        "get_pull_request_files",
        "get_pull_request_status",
        "update_pull_request_branch",
        "get_pull_request_comments",
        "get_pull_request_reviews",
        "create_pull_request_review",
        "create_pull_request",
        "create_or_update_file",
        "push_files",
        "search_repositories",
        "create_repository",
        "get_file_contents",
        "fork_repository",
        "create_branch",
        "list_commits",
        "search_code",
        "search_users",
        "get_code_scanning_alert",
        "list_code_scanning_alerts"
      ],
      "env_vars": [
        {
          "name": "GITHUB_PERSONAL_ACCESS_TOKEN",
          "description": "GitHub personal access token with appropriate permissions",
          "required": true
        },
        {
          "name": "GH_HOST",
          "description": "GitHub Enterprise Server hostname (optional)",
          "required": false
        }
      ],
      "args": [],
      "metadata": {
        "stars": 4600,
        "pulls": 5000,
        "last_updated": "2025-04-07T08:57:00Z"
      },
      "repository_url": "https://github.com/github/github-mcp-server",
      "tags": [
        "api",
        "create",
        "fork",
        "github",
        "list",
        "pull-request",
        "push",
        "repository",
        "search",
        "update",
        "issues"
      ]
    },
    "gitlab": {
      "image": "mcp/gitlab:latest",
      "description": "MCP Server for the GitLab API, enabling project management, file operations, and more.",
      "transport": "stdio",
      "permissions": {
        "read": [],
        "write": [],
        "network": {
          "outbound": {
            "insecure_allow_all": false,
            "allow_transport": [
              "tcp"
            ],
            "allow_host": [
              "docs.gitlab.com",
              "gitlab.com",
              "full.com"
            ],
            "allow_port": [
              443
            ]
          }
        }
      },
      "tools": [
        "create_or_update_file",
        "push_files",
        "search_repositories",
        "create_repository",
        "get_file_contents",
        "create_issue",
        "create_merge_request",
        "fork_repository",
        "create_branch"
      ],
      "env_vars": [
        {
          "name": "GITLAB_PERSONAL_ACCESS_TOKEN",
          "description": "GitLab personal access token with appropriate permissions",
          "required": true
        },
        {
          "name": "GITLAB_API_URL",
          "description": "Base URL for GitLab API (optional, defaults to https://gitlab.com/api/v4)",
          "required": false
        }
      ],
      "args": [],
      "metadata": {
        "stars": 2,
        "pulls": 844,
        "last_updated": "2024-12-20T16:15:05.628096Z"
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "api",
        "create",
        "file",
        "fork",
        "gitlab",
        "management",
        "merge-request",
        "operations",
        "project",
        "search"
      ]
    },
    "google-maps": {
      "image": "mcp/google-maps:latest",
      "description": "MCP Server for the Google Maps API.",
      "transport": "stdio",
      "permissions": {
        "read": [],
        "write": [],
        "network": {
          "outbound": {
            "insecure_allow_all": false,
            "allow_transport": [
              "tcp"
            ],
            "allow_host": [
              "developers.google.com",
              "maps.com"
            ],
            "allow_port": [
              443
            ]
          }
        }
      },
      "tools": [
        "maps_geocode",
        "maps_reverse_geocode",
        "maps_search_places",
        "maps_place_details",
        "maps_distance_matrix",
        "maps_elevation",
        "maps_directions"
      ],
      "env_vars": [
        {
          "name": "GOOGLE_MAPS_API_KEY",
          "description": "Google Maps API key with appropriate permissions",
          "required": true
        }
      ],
      "args": [],
      "metadata": {
        "stars": 0,
        "pulls": 551,
        "last_updated": "2024-12-20T16:15:13.552248Z"
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "api",
        "directions",
        "distance",
        "geocode",
        "google",
        "google-maps",
        "maps",
        "places",
        "search"
      ]
    },
    "memory": {
      "image": "mcp/memory:latest",
      "description": "A basic implementation of persistent memory using a local knowledge graph. This lets Claude remember information about the user across chats.",
      "transport": "stdio",
      "permissions": {
        "read": [],
        "write": [],
        "network": {
          "outbound": {
            "insecure_allow_all": false,
            "allow_transport": [
              "tcp"
            ],
            "allow_host": [],
            "allow_port": [
              443
            ]
          }
        }
      },
      "tools": [
        "create_entities",
        "create_relations",
        "add_observations",
        "delete_entities",
        "delete_observations",
        "delete_relations",
        "read_graph",
        "search_nodes",
        "open_nodes"
      ],
      "env_vars": [
        {
          "name": "MEMORY_FILE_PATH",
          "description": "Path to the memory storage JSON file (default: memory.json in the server directory)",
          "required": false
        }
      ],
      "args": [],
      "metadata": {
        "stars": 0,
        "pulls": 2514,
        "last_updated": "2024-12-20T16:15:23.817084Z"
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "entities",
        "graph",
        "knowledge",
        "memory",
        "observations",
        "persistent",
        "relations"
      ]
    },
    "postgres": {
      "image": "mcp/postgres:latest",
      "description": "A Model Context Protocol server that provides read-only access to PostgreSQL databases. This server enables LLMs to inspect database schemas and execute read-only queries.",
      "transport": "stdio",
      "permissions": {
        "read": [
          "/tmp/db"
        ],
        "write": [
          "/tmp/db"
        ],
        "network": {
          "outbound": {
            "insecure_allow_all": false,
            "allow_transport": [
              "tcp"
            ],
            "allow_host": [],
            "allow_port": [
              443
            ]
          }
        }
      },
      "tools": [
        "query"
      ],
      "env_vars": [],
      "args": [
        "postgresql://host:port/db-name"
      ],
      "metadata": {
        "stars": 2,
        "pulls": 3341,
        "last_updated": "2024-12-20T16:15:32.154691Z"
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "database",
        "postgres",
        "postgresql",
        "query",
        "read-only",
        "schema",
        "sql"
      ]
    },
    "pushover": {
      "image": "ashiknesin/pushover-mcp:latest",
      "description": "A Model Context Protocol implementation for sending notifications via Pushover.net, enabling AI agents to send customizable push notifications to devices.",
      "transport": "stdio",
      "permissions": {
        "read": [],
        "write": [],
        "network": {
          "outbound": {
            "insecure_allow_all": false,
            "allow_transport": [
              "tcp"
            ],
            "allow_host": [
              "api.pushover.net"
            ],
            "allow_port": [
              443
            ]
          }
        }
      },
      "tools": [
        "send"
      ],
      "env_vars": [
        {
          "name": "PUSHOVER_TOKEN",
          "description": "Application token from Pushover.net",
          "required": true
        },
        {
          "name": "PUSHOVER_USER",
          "description": "User key from Pushover.net",
          "required": true
        }
      ],
      "args": [],
      "metadata": {
        "stars": 7,
        "pulls": 0,
        "last_updated": "2025-03-25T16:58:54Z"
      },
      "repository_url": "https://github.com/ashiknesin/pushover-mcp",
      "tags": [
        "notifications",
        "push-notifications",
        "pushover",
        "alerts",
        "messaging",
        "mobile",
        "devices",
        "communication",
        "real-time",
        "monitoring"
      ]
    },
    "puppeteer": {
      "image": "mcp/puppeteer:latest",
      "description": "A Model Context Protocol server that provides browser automation capabilities using Puppeteer",
      "transport": "stdio",
      "permissions": {
        "read": [],
        "write": [],
        "network": {
          "outbound": {
            "insecure_allow_all": true,
            "allow_transport": [
              "tcp"
            ],
            "allow_host": [],
            "allow_port": [
              443
            ]
          }
        }
      },
      "tools": [
        "puppeteer_navigate",
        "puppeteer_screenshot",
        "puppeteer_click",
        "puppeteer_hover",
        "puppeteer_fill",
        "puppeteer_select",
        "puppeteer_evaluate"
      ],
      "env_vars": [
        {
          "name": "DOCKER_CONTAINER",
          "description": "Set to true when running in Docker to use headless mode",
          "required": false,
          "default": "true"
        }
      ],
      "args": [],
      "metadata": {
        "stars": 4,
        "pulls": 6995,
        "last_updated": "2024-12-20T16:15:48.067162Z"
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "automation",
        "browser",
        "capabilities",
        "navigate",
        "provides",
        "puppeteer",
        "puppeteer_click",
        "puppeteer_evaluate",
        "puppeteer_fill",
        "puppeteer_hover"
      ]
    },
    "sequentialthinking": {
      "image": "mcp/sequentialthinking:latest",
      "description": "MCP server enabling dynamic problem-solving with a structured, reflective approach that can adapt and evolve as understanding deepens.",
      "transport": "stdio",
      "permissions": {
        "read": [],
        "write": [],
        "network": {
          "outbound": {
            "insecure_allow_all": false,
            "allow_transport": [
              "tcp"
            ],
            "allow_host": [],
            "allow_port": [
              443
            ]
          }
        }
      },
      "tools": [
        "sequentialthinking"
      ],
      "env_vars": [],
      "args": [],
      "metadata": {
        "stars": 0,
        "pulls": 4031,
        "last_updated": "2024-12-20T16:15:56.759355Z"
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "approach",
        "dynamic",
        "enabling",
        "problem",
        "reflective",
        "sequentialthinking",
        "solving",
        "structured",
        "step-by-step",
        "revision",
        "branching",
        "chain-of-thought"
      ]
    },
    "slack": {
      "image": "mcp/slack:latest",
      "description": "MCP Server for the Slack API, enabling Claude to interact with Slack workspaces",
      "transport": "stdio",
      "permissions": {
        "read": [],
        "write": [],
        "network": {
          "outbound": {
            "insecure_allow_all": false,
            "allow_transport": [
              "tcp"
            ],
            "allow_host": [
              "api.slack.com",
              "slack.com"
            ],
            "allow_port": [
              443
            ]
          }
        }
      },
      "tools": [
        "slack_list_channels",
        "slack_post_message",
        "slack_reply_to_thread",
        "slack_add_reaction",
        "slack_get_channel_history",
        "slack_get_thread_replies",
        "slack_get_users",
        "slack_get_user_profile"
      ],
      "env_vars": [
        {
          "name": "SLACK_BOT_TOKEN",
          "description": "Bot User OAuth Token that starts with xoxb-",
          "required": true
        },
        {
          "name": "SLACK_TEAM_ID",
          "description": "Slack Team ID that starts with T",
          "required": true
        }
      ],
      "args": [],
      "metadata": {
        "stars": 2,
        "pulls": 627,
        "last_updated": "2024-12-20T16:16:05.464285Z"
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "api",
        "claude",
        "enabling",
        "interact",
        "list",
        "post",
        "reply",
        "slack",
        "tools",
        "workspaces"
      ]
    },
    "redis": {
      "image": "mcp/redis:latest",
      "description": "A Model Context Protocol server that provides access to Redis databases. This server enables LLMs to interact with Redis key-value stores through a set of standardized tools.",
      "transport": "stdio",
      "permissions": {
        "read": [],
        "write": [],
        "network": {
          "outbound": {
            "insecure_allow_all": false,
            "allow_transport": [
              "tcp"
            ],
            "allow_host": [],
            "allow_port": [
              443,
              6379
            ]
          }
        }
      },
      "tools": [
        "set",
        "get",
        "delete",
        "list"
      ],
      "env_vars": [],
      "args": [],
      "metadata": {
        "stars": 0,
        "pulls": 421,
        "last_updated": "2025-03-05T21:16:07.523715Z"
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "redis",
        "database",
        "key-value",
        "storage",
        "cache",
        "data"
      ]
    },
    "perplexity-ask": {
      "image": "mcp/perplexity-ask:latest",
      "description": "",
      "transport": "stdio",
      "permissions": {
        "read": [],
        "write": [],
        "network": {
          "outbound": {
            "insecure_allow_all": false,
            "allow_transport": [
              "tcp"
            ],
            "allow_host": [
                "api.perplexity.ai"
            ],
            "allow_port": [
              443
            ]
          }
        }
      },
      "tools": [],
      "env_vars": [
        {
          "name": "PERPLEXITY_API_KEY",
          "description": "Perplexity API key",
          "required": true
        }
      ],
      "args": [],
      "metadata": {
        "stars": 0,
        "pulls": 556,
        "last_updated": "2025-03-13T00:32:21.85191Z"
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "ask",
        "perplexity",
        "perplexity-ask"
      ]
    },
    "atlassian": {
      "image": "mcp/atlassian:latest",
      "description": "Model Context Protocol (MCP) server for Atlassian products (Confluence and Jira). This integration supports both Confluence & Jira Cloud and Server/Data Center deployments.",
      "transport": "stdio",
      "permissions": {
        "read": [],
        "write": [],
        "network": {
          "outbound": {
            "insecure_allow_all": false,
            "allow_transport": [
              "tcp"
            ],
            "allow_host": [
              "atlassian.net",
              "atlassian.com"
            ],
            "allow_port": [
              443
            ]
          }
        }
      },
      "tools": [
        "confluence_search",
        "confluence_get_page",
        "confluence_get_page_children",
        "confluence_get_page_ancestors",
        "confluence_get_comments",
        "confluence_create_page",
        "confluence_update_page",
        "confluence_delete_page",
        "confluence_attach_content",
        "jira_get_issue",
        "jira_search",
        "jira_get_project_issues",
        "jira_get_epic_issues",
        "jira_create_issue",
        "jira_update_issue",
        "jira_delete_issue",
        "jira_get_transitions",
        "jira_transition_issue",
        "jira_add_comment",
        "jira_add_worklog",
        "jira_get_worklog",
        "jira_download_attachments",
        "jira_link_to_epic",
        "jira_get_agile_boards",
        "jira_get_board_issues",
        "jira_get_sprints_from_board",
        "jira_get_sprint_issues"
      ],
      "env_vars": [
        {
          "name": "CONFLUENCE_URL",
          "description": "Confluence URL (e.g., https://your-domain.atlassian.net/wiki)",
          "required": false
        },
        {
          "name": "CONFLUENCE_USERNAME",
          "description": "Confluence username/email for Cloud deployments",
          "required": false
        },
        {
          "name": "CONFLUENCE_API_TOKEN",
          "description": "Confluence API token for Cloud deployments",
          "required": false
        },
        {
          "name": "CONFLUENCE_PERSONAL_TOKEN",
          "description": "Confluence Personal Access Token for Server/Data Center deployments",
          "required": false
        },
        {
          "name": "CONFLUENCE_SSL_VERIFY",
          "description": "Verify SSL certificates for Confluence Server/Data Center (true/false)",
          "required": false
        },
        {
          "name": "CONFLUENCE_SPACES_FILTER",
          "description": "Comma-separated list of Confluence space keys to filter search results",
          "required": false
        },
        {
          "name": "JIRA_URL",
          "description": "Jira URL (e.g., https://your-domain.atlassian.net)",
          "required": false
        },
        {
          "name": "JIRA_USERNAME",
          "description": "Jira username/email for Cloud deployments",
          "required": false
        },
        {
          "name": "JIRA_API_TOKEN",
          "description": "Jira API token for Cloud deployments",
          "required": false
        },
        {
          "name": "JIRA_PERSONAL_TOKEN",
          "description": "Jira Personal Access Token for Server/Data Center deployments",
          "required": false
        },
        {
          "name": "JIRA_SSL_VERIFY",
          "description": "Verify SSL certificates for Jira Server/Data Center (true/false)",
          "required": false
        },
        {
          "name": "JIRA_PROJECTS_FILTER",
          "description": "Comma-separated list of Jira project keys to filter search results",
          "required": false
        },
        {
          "name": "READ_ONLY_MODE",
          "description": "Run in read-only mode (disables all write operations)",
          "required": false
        },
        {
          "name": "MCP_VERBOSE",
          "description": "Increase logging verbosity",
          "required": false
        }
      ],
      "args": [],
      "metadata": {
        "stars": 698,
        "pulls": 89,
        "last_updated": "2025-03-21T21:32:38.626915Z"
      },
      "repository_url": "https://github.com/sooperset/mcp-atlassian",
      "tags": [
        "atlassian",
        "confluence",
        "jira",
        "wiki",
        "issue-tracking",
        "project-management",
        "documentation",
        "cloud",
        "server",
        "data-center"
      ]
    },
    "hass-mcp": {
      "image": "voska/hass-mcp:latest",
      "description": "A Model Context Protocol (MCP) server for Home Assistant integration with Claude and other LLMs, enabling direct interaction with smart home devices, sensors, and automations.",
      "transport": "stdio",
      "permissions": {
        "read": [],
        "write": [],
        "network": {
          "outbound": {
            "insecure_allow_all": true,
            "allow_transport": [
              "tcp"
            ],
            "allow_host": [
            ],
            "allow_port": [
            ]
          }
        }
      },
      "tools": [
        "get_version",
        "get_entity",
        "entity_action",
        "list_entities",
        "search_entities_tool",
        "domain_summary_tool",
        "list_automations",
        "call_service_tool",
        "restart_ha",
        "get_history",
        "get_error_log"
      ],
      "env_vars": [
        {
          "name": "HA_URL",
          "description": "Home Assistant instance URL (e.g. http://homeassistant.local:8123)",
          "required": true
        },
        {
          "name": "HA_TOKEN",
          "description": "Home Assistant Long-Lived Access Token",
          "required": true
        }
      ],
      "args": [],
      "metadata": {
        "stars": 19,
        "pulls": 0,
        "last_updated": "2025-03-25T16:58:54Z"
      },
      "repository_url": "https://github.com/voska/hass-mcp",
      "tags": [
        "home-assistant",
        "smart-home",
        "automation",
        "iot",
        "sensors",
        "devices",
        "control",
        "monitoring",
        "home-automation",
        "domotics"
     ]
   },
   "grafana": {
     "image": "grafana/grafana-oss:latest",
     "description": "A Model Context Protocol (MCP) server for Grafana OSS that provides access to your Grafana instance and the surrounding ecosystem, enabling dashboard search, datasource queries, alerting management, and incident response.",
     "transport": "stdio",
     "permissions": {
       "read": [],
       "write": [],
       "network": {
         "outbound": {
           "insecure_allow_all": false,
           "allow_transport": [
             "tcp"
           ],
           "allow_host": [
             "grafana.com"
           ],
           "allow_port": [
             443
           ]
         }
       }
     },
     "tools": [
       "search_dashboards",
       "get_dashboard_by_uid",
       "list_datasources",
       "get_datasource_by_uid",
       "get_datasource_by_name",
       "query_prometheus",
       "list_prometheus_metric_metadata",
       "list_prometheus_metric_names",
       "list_prometheus_label_names",
       "list_prometheus_label_values",
       "list_incidents",
       "create_incident",
       "add_activity_to_incident",
       "resolve_incident",
       "query_loki_logs",
       "list_loki_label_names",
       "list_loki_label_values",
       "query_loki_stats",
       "list_alert_rules",
       "get_alert_rule_by_uid",
       "list_oncall_schedules",
       "get_oncall_shift",
       "get_current_oncall_users",
       "list_oncall_teams",
       "list_oncall_users"
     ],
     "env_vars": [
       {
         "name": "GRAFANA_URL",
         "description": "URL of the Grafana instance to connect to",
         "required": true
       },
       {
         "name": "GRAFANA_API_KEY",
         "description": "Service account token with appropriate permissions",
         "required": true
       }
     ],
     "args": [],
     "metadata": {
       "stars": 347,
       "pulls": 0,
       "last_updated": "2025-03-25T16:58:54Z"
     },
     "repository_url": "https://github.com/grafana/mcp-grafana",
     "tags": [
       "grafana",
       "dashboards",
       "visualization",
       "monitoring",
       "alerting",
       "prometheus",
       "loki",
       "tempo",
       "pyroscope",
       "incidents",
       "observability",
       "metrics",
       "logs",
       "traces"
     ]
   },
   "semgrep": {
     "image": "ghcr.io/semgrep/mcp:latest",
     "description": "An MCP server for using Semgrep to scan code for security vulnerabilities. Semgrep is a fast, deterministic static analysis tool that semantically understands many languages and comes with over 5,000 rules.",
     "transport": "sse",
     "permissions": {
       "read": [],
       "write": [],
       "network": {
         "outbound": {
           "insecure_allow_all": false,
           "allow_transport": [
             "tcp"
           ],
           "allow_host": [
             "semgrep.dev",
             "semgrep.com"
           ],
           "allow_port": [
             443
           ]
         }
       }
     },
     "tools": [
       "security_check",
       "semgrep_scan",
       "semgrep_scan_with_custom_rule",
       "get_abstract_syntax_tree",
       "supported_languages",
       "semgrep_rule_schema",
       "write_custom_semgrep_rule"
     ],
     "env_vars": [
       {
         "name": "SEMGREP_APP_TOKEN",
         "description": "Token for connecting to Semgrep AppSec Platform",
         "required": false
       }
     ],
     "args": [],
     "metadata": {
       "stars": 62,
       "pulls": 0,
       "last_updated": "2025-04-07T12:37:00Z"
     },
     "repository_url": "https://github.com/semgrep/mcp",
     "tags": [
       "security",
       "static-analysis",
       "code-scanning",
       "vulnerability-detection",
       "sast",
       "code-quality",
       "security-scanning",
       "semgrep",
       "ast",
       "code-analysis"
     ]
   },
   "netbird": {
     "image": "aantti/mcp-netbird:latest",
     "description": "A Model Context Protocol server for NetBird, enabling management of your NetBird network.",
     "transport": "sse",
     "target_port": 8001,
     "permissions": {
       "read": [],
       "write": [],
       "network": {
         "outbound": {
           "insecure_allow_all": true,
           "allow_transport": [
             "tcp"
           ],
           "allow_host": [],
           "allow_port": [
             443
           ]
         }
       }
     },
     "tools": [
       "list_netbird_peers",
       "list_netbird_port_allocations",
       "list_netbird_groups",
       "list_netbird_policies",
       "list_netbird_posture_checks",
       "list_netbird_networks",
       "list_netbird_nameservers"
     ],
     "env_vars": [
       {
         "name": "NETBIRD_API_TOKEN",
         "description": "NetBird API token for authentication",
         "required": true
       },
       {
         "name": "NETBIRD_HOST",
         "description": "NetBird API host (default is api.netbird.io)",
         "required": false
       }
     ],
     "args": ["--transport", "sse", "--sse-address", ":8001"],
     "metadata": {
       "stars": 27,
       "pulls": 0,
       "last_updated": "2025-04-15T17:21:00Z"
     },
     "repository_url": "https://github.com/aantti/mcp-netbird",
     "tags": [
       "netbird",
       "vpn",
       "networking",
       "peer",
       "route",
       "dns",
       "setup-key",
       "management"
     ]
   }
 }
}
